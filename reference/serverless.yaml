app: playwright-aws-lambda-project
service: playwright-aws-lambda-project
frameworkVersion: '3'

plugins:
- serverless-step-functions
provider:
  name: aws
  ecr:
    images:
      playwright-aws-image:
        path: ./
  stage: dev
  region: us-east-1
  iamRoleStatements:
  - Effect: Allow
    Action:
    - lambda:InvokeFunction
    - lambda:InvokeAsync
    Resource: "*"
  - Effect: Allow
    Action:
    - s3:GetObject
    - s3:GetObjectAcl
    - s3:PutObject
    - s3:PutObjectAcl
    - s3:ListBucket
    - s3:ListAllMyBuckets
    - s3:CreateBucket
    Resource: "*"

functions:
  PlaywrightLambdaFunction:
    timeout: 600
    memorySize: 3008
    image:
      name: playwright-aws-image
    environment:
      QA_BUCKET: {'Ref': 'SourceS3Bucket'}


stepFunctions:
  stateMachines:
    RunTestAndGenerateReportStateMachine:
      events:
      - http:
          path: aws2
          method: POST
          cors: true
      name: GenerateReportStateMachine
      definition:
        Comment: "GenerateReportStateMachine"
        StartAt: GetTestListState
        States:

          GetTestListState:
            Type: Task
            Resource:
              Fn::GetAtt: [PlaywrightLambdaFunction, Arn]
            Next: ParallelRunTestState

          ParallelRunTestState:
            Type: Map
            InputPath: $
            ItemsPath: $.testList
            MaxConcurrency: 1000
            Iterator:
              StartAt: RunTestState
              States:
                RunTestState:
                  Type: Task
                  TimeoutSeconds: 580
                  Resource:
                    Fn::GetAtt: [PlaywrightLambdaFunction, Arn]
                  Parameters:
                    action: runTest
                    runId.$: $.runId
                    testName.$: $.testName
                  End: True
            ResultPath: "$.testResultList"
            Next: GenerateReportState

          GenerateReportState:
            Type: Task
            InputPath: "$"
            Resource:
              Fn::GetAtt: [PlaywrightLambdaFunction, Arn]
            Parameters:
              action: generateReport
              runId.$: $.runId
              testResultList.$: $.testResultList
            End: True

resources:
  Resources:
    SourceS3Bucket:
      Type: AWS::S3::Bucket
      UpdateReplacePolicy: Retain
      DeletionPolicy: Retain
    APIGWS3Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
          Version: "2012-10-17"
        RoleName: AAPIGWS3Role
    APIGWS3Policy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyDocument:
          Statement:
          - Action: s3:Get
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - SourceS3Bucket
              - Arn
          - Action:
            - s3:GetBucket*
            - s3:GetObject*
            - s3:List*
            Effect: Allow
            Resource:
            - Fn::GetAtt:
              - SourceS3Bucket
              - Arn
            - Fn::Join:
              - ""
              - - Fn::GetAtt:
                  - SourceS3Bucket
                  - Arn
                - /*
          Version: "2012-10-17"
        PolicyName: APIGWS3Policy
        Roles:
        - Ref: APIGWS3Role
    APIGWRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Description: This Service Will serve static pages from S3
        Name: Serverless Website Service
    APIGWCloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
          Version: "2012-10-17"
        ManagedPolicyArns:
        - Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
    APIGWAccount:
      Type: AWS::ApiGateway::Account
      Properties:
        CloudWatchRoleArn:
          Fn::GetAtt:
          - APIGWCloudWatchRole
          - Arn
      DependsOn:
      - APIGWRestApi
    APIGWDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: APIGWRestApi
        Description: Automatically created by the RestApi construct
      DependsOn:
      - APIGWServiceFolderkeyMethod
      - APIGWServiceFolderkey
      - APIGWServiceFolderResource
    APIGWStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        RestApiId:
          Ref: APIGWRestApi
        DeploymentId:
          Ref: APIGWDeployment
        StageName: devo
      DependsOn:
      - APIGWAccount
    APIGWServiceFolderResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt:
          - APIGWRestApi
          - RootResourceId
        PathPart: "{folder}"
        RestApiId:
          Ref: APIGWRestApi
    APIGWServiceFolderkey:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Ref: APIGWServiceFolderResource
        PathPart: "{key+}"
        RestApiId:
          Ref: APIGWRestApi
    APIGWServiceFolderkeyMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        HttpMethod: GET
        ResourceId:
          Ref: APIGWServiceFolderkey
        RestApiId:
          Ref: APIGWRestApi
        AuthorizationType: NONE
        Integration:
          Credentials:
            Fn::GetAtt:
            - APIGWS3Role
            - Arn
          IntegrationHttpMethod: GET
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Content-Type: integration.response.header.Content-Type
            StatusCode: "200"
          RequestParameters:
            integration.request.path.folder: method.request.path.folder
            integration.request.path.key: method.request.path.key
          Type: AWS
          Uri:
            Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :s3:path/
              - Ref: SourceS3Bucket
              - /{folder}/{key}
        MethodResponses:
        - ResponseParameters:
            method.response.header.Content-Type: true
          StatusCode: "200"
        RequestParameters:
          method.request.path.folder: true
          method.request.path.key: true
          method.request.header.Content-Type: true

  Outputs:
    APIGWEndpoint:
      Value:
        Fn::Join:
        - ""
        - - https://
          - Ref: APIGWRestApi
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: APIGWStage
          - /
      Export:
        Name: ServerlessWebsiteUrl
    SourceS3BucketName:
      Value:
        Ref: SourceS3Bucket
      Export:
        Name: ServerlessWebsiteBucketName
